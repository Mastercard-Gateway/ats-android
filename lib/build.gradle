apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka-android'


android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionName libraryVersionName

        consumerProguardFiles 'proguard.pro'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    lintOptions {
        abortOnError false
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    packageOptions {
        prefix = "com.mastercard.gateway.ats.domain"
        reportUndocumented = false
    }
}

// define an 'optional' dependency
configurations {
    optional
    implementation.extendsFrom optional
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'

    // Simple XML
    implementation 'org.simpleframework:simple-xml:2.7.1'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:4.0-alpha-3"
    testImplementation "org.mockito:mockito-core:2.19.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"
    testImplementation "org.powermock:powermock-module-junit4:1.7.1"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.1"

    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
}

task dokkaJavadocs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task dokkaJavadocsJar(type: Jar, dependsOn: dokkaJavadocs) {
    classifier = 'javadoc'
    from dokkaJavadocs.outputDirectory
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = "com.mastercard.gateway"
            artifactId = "ats-pos-android"
            version = libraryVersionName

            afterEvaluate {
                artifact bundleReleaseAar
                artifact dokkaJavadocsJar
                artifact androidSourcesJar
            }

            pom.withXml {
                def root = asNode()

                // adds basic info
                root.appendNode('name', 'Mastercard ATS Android SDK')
                root.appendNode('description', 'The Android SDK for Mastercard ATS')

                // adds license info
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Apache License 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/')
                license.appendNode('distribution', 'repo')

                // adds source control info
                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/Mastercard-Gateway/ats-android-sdk')
                scm.appendNode('connection', 'https://github.com/Mastercard-Gateway/ats-android-sdk.git')

                // adds dependencies
                def dependenciesNode = root.appendNode('dependencies')
                configurations.implementation.allDependencies.each { dp ->
                    if (dp.group) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)

                        if (configurations.optional.allDependencies.contains(dp)) {
                            dependencyNode.appendNode('optional', true)
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['aar']
    publish = true
    pkg {
        repo = 'Android'
        name = 'ats-android'
        userOrg = 'simplify'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Mastercard-Gateway/ats-android-sdk.git'
        version {
            name = libraryVersionName
        }
    }
}